import hashlib
import requests
import json
from dotenv import load_dotenv
import os
import mimetypes
import logging
import time

# Load environment variables
load_dotenv()

# Configuration
THEHIVE_URL = os.getenv("THEHIVE_URL", "http://localhost:9000/api")
THEHIVE_API_KEY = os.getenv("THEHIVE_API_KEY", "your_api_key_here")
CORTEX_URL = os.getenv("CORTEX_URL", "http://localhost:9001/api")
CORTEX_API_KEY = os.getenv("CORTEX_API_KEY", "your_cortex_api_key_here")
CORTEX_ID = os.getenv("CORTEX_ID", "your_cortex_id_here")

# Specific IDs for analyzer and responder - Configure these for your specific use case
ANALYZER_ID = os.getenv("ANALYZER_ID")  # Set to your desired analyzer ID
RESPONDER_ID = os.getenv("RESPONDER_ID")  # Set to your desired responder ID

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Headers for TheHive API
headers = {
    "Authorization": f"Bearer {THEHIVE_API_KEY}",
    "Content-Type": "application/json",
    "Accept": "application/json"
}

# Headers for Cortex API
cortex_headers = {
    "Authorization": f"Bearer {CORTEX_API_KEY}",
    "Content-Type": "application/json",
    "Accept": "application/json"
}

def compute_sha256(file_path):
    """Compute SHA-256 hash of a file."""
    try:
        sha256 = hashlib.sha256()
        with open(file_path, "rb") as f:
            while chunk := f.read(8192):
                sha256.update(chunk)
        hash_value = sha256.hexdigest()
        logger.info(f"Computed SHA-256 for {file_path}: {hash_value}")
        return hash_value
    except Exception as e:
        logger.error(f"Error computing hash for {file_path}: {e}")
        return None

def test_thehive_connection():
    """Test connection to TheHive API."""
    try:
        test_url = f"{THEHIVE_URL}/user/current"
        logger.info(f"Testing connection to: {test_url}")
        r = requests.get(test_url, headers=headers)
        if r.status_code == 200:
            logger.info("Connection successful!")
            return True
        else:
            logger.error(f"Connection failed: {r.status_code} - {r.text}")
            return False
    except Exception as e:
        logger.error(f"Connection error: {e}")
        return False

def test_cortex_connection():
    """Test connection to Cortex API."""
    try:
        test_url = f"{CORTEX_URL}/user/current"
        logger.info(f"Testing connection to: {test_url}")
        r = requests.get(test_url, headers=cortex_headers)
        if r.status_code == 200:
            logger.info("Cortex connection successful!")
            return True
        else:
            logger.error(f"Cortex connection failed: {r.status_code} - {r.text}")
            return False
    except Exception as e:
        logger.error(f"Cortex connection error: {e}")
        return False

def get_cortex_analyzers(api_url, api_key):
    """
    Get list of available Cortex analyzers from TheHive
    
    Args:
        api_url (str): TheHive API URL base (e.g., 'http://localhost:9000')
        api_key (str): TheHive API key
    
    Returns:
        list: List of analyzers if successful, empty list otherwise
    """
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    if api_url.endswith('/'):
        api_url = api_url[:-1]
    
    url = f"{api_url}/connector/cortex/analyzer"
    logger.info(f"Fetching analyzers from: {url}")
    try:
        response = requests.get(url, headers=headers, verify=False)
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"Error getting analyzers: {response.status_code} - {response.text}")
            return []
    except Exception as e:
        logger.error(f"Error connecting to TheHive: {str(e)}")
        return []

def create_alert(ioc, description, source_ref, file_path=None):
    """Create an alert with filename observable."""
    artifacts = [
        {
            "dataType": "filename",
            "data": ioc,
            "message": "Sample file name",
            "tlp": 2
        }
    ]
    
    alert = {
        "title": f"Security Alert: {ioc}",
        "description": description,
        "type": "external",
        "source": "Automated Security System",
        "sourceRef": source_ref,
        "severity": 3,
        "tlp": 2,
        "tags": ["Security", "Automated"],
        "artifacts": artifacts
    }
    
    try:
        r = requests.post(f"{THEHIVE_URL}/alert", headers=headers, data=json.dumps(alert))
        r.raise_for_status()
        response = r.json()
        alert_id = response.get("id")
        logger.info(f"Alert created: {alert_id}")
        return alert_id
    except requests.exceptions.RequestException as e:
        logger.error(f"Error creating alert: {e}")
        return None

def create_case(ioc, description):
    """Create a new case in TheHive."""
    case = {
        "title": f"Security Case: {ioc}",
        "description": description,
        "severity": 3,
        "tlp": 2,
        "tags": ["Security", "Investigation"],
        "flag": False,
        "status": "Open"
    }
    
    try:
        r = requests.post(f"{THEHIVE_URL}/case", headers=headers, data=json.dumps(case))
        r.raise_for_status()
        case_data = r.json()
        case_id = case_data.get("id")
        logger.info(f"Case created: {case_id}")
        return case_id
    except requests.exceptions.RequestException as e:
        logger.error(f"Error creating case: {e}")
        return None

def associate_alert_to_case(alert_id, case_id):
    """Associate an alert with an existing case."""
    try:
        url = f"{THEHIVE_URL}/alert/{alert_id}/merge/{case_id}"
        r = requests.post(url, headers=headers)
        r.raise_for_status()
        logger.info(f"Alert {alert_id} associated with case {case_id}")
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"Error associating alert {alert_id} to case {case_id}: {e}")
        return False

def create_observable(case_id, data_type, data, message, tlp=2):
    """Create an observable for a case and return its ID."""
    observable = {
        "dataType": data_type,
        "data": data,
        "message": message,
        "tlp": tlp,
        "status": "Ok"
    }
    
    try:
        url = f"{THEHIVE_URL}/case/{case_id}/artifact"
        r = requests.post(url, headers=headers, data=json.dumps(observable))
        r.raise_for_status()
        response = r.json()
        logger.debug(f"Observable creation response: {response}")
        
        if isinstance(response, list) and len(response) > 0:
            observable_id = response[0].get("id")
        elif isinstance(response, dict):
            observable_id = response.get("id")
        else:
            logger.error(f"Unexpected response format for observable creation: {response}")
            return None
            
        if observable_id:
            logger.info(f"Observable created for case {case_id}: {observable_id} ({data_type}: {data})")
            return observable_id
        else:
            logger.error(f"No observable ID found in response: {response}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Error creating observable for case {case_id}: {e}")
        return None

def upload_file_to_case(case_id, filepath):
    """Upload a file as an artifact to an existing case in TheHive."""
    try:
        filename = os.path.basename(filepath)
        mime_type, _ = mimetypes.guess_type(filepath) or ('application/octet-stream', None)
        
        files = {
            'attachment': (filename, open(filepath, 'rb'), mime_type)
        }
        data = {
            'dataType': 'file',
            'message': f'File uploaded: {filename}',
            'tlp': 2
        }
        
        upload_headers = {
            'Authorization': headers['Authorization']
        }
        
        url = f"{THEHIVE_URL}/case/{case_id}/artifact"
        r = requests.post(url, headers=upload_headers, files=files, data=data)
        r.raise_for_status()
        
        response = r.json()
        if isinstance(response, list) and len(response) > 0:
            artifact_id = response[0].get("id") if isinstance(response[0], dict) else str(response[0])
        else:
            artifact_id = response.get("id") if isinstance(response, dict) else str(response)
            
        logger.info(f"File {filename} uploaded to case {case_id} as artifact: {artifact_id}")
        return artifact_id
    except Exception as e:
        logger.error(f"Error uploading file {filepath} to case {case_id}: {e}")
        return None

def run_analyzer(artifact_id, analyzer_id):
    """Run specified analyzer on the artifact using TheHive 5 Cortex API."""
    try:
        url = f"{THEHIVE_URL}/connector/cortex/job"
        payload = {
            "cortexId": CORTEX_ID,
            "artifactId": artifact_id,
            "analyzerId": analyzer_id
        }
        logger.info(f"Running analyzer {analyzer_id} on artifact {artifact_id}")
        r = requests.post(url, headers=headers, data=json.dumps(payload))
        
        # TheHive 5 returns 201 for job creation, not 200
        if r.status_code == 201:
            response = r.json()
            job_id = response.get("id")
            if job_id:
                logger.info(f"Started analyzer job: {job_id}")
                return job_id
            else:
                logger.error(f"No job ID returned in response: {response}")
                return None
        else:
            logger.error(f"Analyzer response: {r.status_code} - {r.text}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Error running analyzer on artifact {artifact_id}: {e}")
        return None

def wait_for_analyzer(job_id, timeout=300, poll_interval=10):
    """Poll the analyzer job until completion or timeout using TheHive API."""
    start_time = time.time()
    try:
        # Use TheHive API to check job status, not Cortex directly
        url = f"{THEHIVE_URL}/connector/cortex/job/{job_id}"
        logger.info(f"Polling job status at: {url}")
        
        while time.time() - start_time < timeout:
            r = requests.get(url, headers=headers)
            r.raise_for_status()
            job = r.json()
            status = job.get("status")
            
            logger.debug(f"Job {job_id} current status: {status}")
            
            if status == "Success":
                logger.info(f"Analyzer job {job_id} completed successfully")
                return job
            elif status == "Failure":
                error_msg = job.get('errorMessage', 'No error message')
                logger.error(f"Analyzer job {job_id} failed: {error_msg}")
                return None
            elif status in ["InProgress", "Waiting"]:
                logger.debug(f"Job {job_id} status: {status}, waiting...")
                time.sleep(poll_interval)
            else:
                logger.warning(f"Unknown job status: {status}")
                time.sleep(poll_interval)
                
        logger.error(f"Analyzer job {job_id} timed out after {timeout} seconds")
        return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Error polling job {job_id}: {e}")
        return None

def run_responder(artifact_id, responder_id):
    """Run specified responder on the artifact using TheHive 5 Cortex API."""
    try:
        url = f"{THEHIVE_URL}/connector/cortex/action"
        payload = {
            "responderId": responder_id,
            "cortexId": CORTEX_ID,
            "objectType": "case_artifact",
            "objectId": artifact_id ,
            "parameters": {}
        }
        logger.info(f"Running responder {responder_id} on artifact {artifact_id}")
        r = requests.post(url, headers=headers, json=payload, verify=False)
        
        if r.status_code in [200, 201]:
            response = r.json()
            responder_job_id = response.get("id")
            logger.info(f"Started responder job: {responder_job_id}")
            return True
        else:
            logger.error(f"Responder response: {r.status_code} - {r.text}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Error running responder on artifact {artifact_id}: {e}")
        return None

def handle_security_incident(ioc, description="Auto-alert from security system", file_path=None):
    """Handle security incident detection pipeline."""
    source_ref = f"{ioc}-{hash(ioc)}"
    
    if not test_thehive_connection():
        logger.error("Failed to connect to TheHive. Please check your configuration.")
        return None, None, None
    
    if not test_cortex_connection():
        logger.error("Failed to connect to Cortex. Please check your configuration.")
        return None, None, None
    
    # Step 1: Create alert
    alert_id = create_alert(ioc, description, source_ref)
    if not alert_id:
        return None, None, None
    
    # Step 2: Create case
    case_id = create_case(ioc, description)
    if not case_id:
        return alert_id, None, None
    
    # Step 3: Associate alert with case
    if not associate_alert_to_case(alert_id, case_id):
        logger.warning(f"Failed to associate alert {alert_id} with case {case_id}")
    
    # Step 4: Create observables separately
    hash_observable_id = None
    if file_path and os.path.exists(file_path):
        sha256 = compute_sha256(file_path)
        if sha256:
            hash_observable_id = create_observable(
                case_id,
                data_type="hash",
                data=sha256,
                message=f"SHA-256 hash of {ioc}",
                tlp=2
            )
    
    # Step 5: Upload file to case if provided
    file_artifact_id = None
    if file_path and os.path.exists(file_path):
        file_artifact_id = upload_file_to_case(case_id, file_path)
        if not file_artifact_id:
            logger.warning(f"File upload failed for {file_path}")
    
    # Step 6: Run analyzer and responder on hash observable if available and configured
    if hash_observable_id and ANALYZER_ID:
        # Run configured analyzer
        job_id = run_analyzer(hash_observable_id, analyzer_id=ANALYZER_ID)
        if job_id:
            job_result = wait_for_analyzer(job_id)
            if job_result:
                logger.info(f"Analyzer completed successfully for job {job_id}")
                # Run configured responder if available
                if RESPONDER_ID:
                    responder_job_id = run_responder(hash_observable_id, RESPONDER_ID)
                    if responder_job_id:
                        logger.info(f"Responder job {responder_job_id} triggered for artifact {hash_observable_id}")
                    else:
                        logger.warning("Failed to trigger responder")
                else:
                    logger.info("No responder configured, skipping responder execution")
            else:
                logger.warning("Analyzer job did not complete successfully")
        else:
            logger.warning("Failed to start analyzer job")
    else:
        if not hash_observable_id:
            logger.warning("No hash observable found for analysis")
        if not ANALYZER_ID:
            logger.info("No analyzer configured, skipping analysis")
    
    return alert_id, case_id, hash_observable_id

if __name__ == "__main__":
    test_file_path = os.getenv("FILE_PATH", "your_file_path_here")
    
    if os.path.exists(test_file_path):
        logger.info(f"Processing file: {test_file_path}")
        alert_id, case_id, hash_observable_id = handle_security_incident("task.ps1", "File for security analysis", test_file_path)
        if case_id:
            logger.info(f"Pipeline completed for case: {case_id}")
            if hash_observable_id:
                logger.info(f"Hash observable ID: {hash_observable_id}")
    else:
        logger.warning(f"File not found: {test_file_path}")
        logger.info("Creating alert and case without file attachment")
        alert_id, case_id, hash_observable_id = handle_security_incident("task.ps1", "File for security analysis (file not found)")